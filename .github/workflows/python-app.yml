# This workflow installs Python dependencies, runs tests, and lints with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./example-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install Poetry Action
        uses: snok/install-poetry@v1.3.4
        with:
          virtualenvs-create: true
          virtualenvs-in-project: false
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry
            .venv
        key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-root  


      - name: Task test
        run: poetry run task test

  lint:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ./example-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install Poetry Action
        uses: snok/install-poetry@v1.3.4
        with:
          virtualenvs-create: true
          virtualenvs-in-project: false
          installer-parallel: true

      - name: Install dependencies
        run: poetry install --no-root

      - name: Test lint
        run: poetry run task lint

  formatter:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ./example-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install Poetry Action
        uses: snok/install-poetry@v1.3.4
        with:
          virtualenvs-create: true
          virtualenvs-in-project: false
          installer-parallel: true

      - name: Install dependencies
        run: poetry install --no-root

      - name: Task Formatter
        run: poetry run task formatter



  security:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ./example-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install Poetry Action
        uses: snok/install-poetry@v1.3.4
        with:
          virtualenvs-create: true
          virtualenvs-in-project: false
          installer-parallel: true

      - name: Install dependencies
        run: poetry install --no-root

      - name: Task Security
        run: poetry run task security


  unittests:
    runs-on: ubuntu-latest
    needs:
      - lint
      - formatter
      - security
    defaults:
      run:
        working-directory: ./example-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install Poetry Action
        uses: snok/install-poetry@v1.3.4
        with:
          virtualenvs-create: true
          virtualenvs-in-project: false
          installer-parallel: true

      - name: Install dependencies
        run: poetry install --no-root

      - name: Unit test
        run: poetry run pytest
