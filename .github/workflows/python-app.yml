# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install Poetry Action
      # You may pin to the exact commit or the version.
      # uses: snok/install-poetry@93ada01c735cc8a383ce0ce2ae205a21c415379b
      uses: snok/install-poetry@v1.3.4
      with:
      # The Poetry version to install
      version: # default is latest
      # Whether Poetry should create a virtualenv or not
      virtualenvs-create: # optional, default is true
      # Whether Poetry should create virtualenvs in the project directory or not
      virtualenvs-in-project: # optional, default is false
      # The Poetry virtualenv path
      virtualenvs-path: # optional, default is {cache-dir}/virtualenvs
      # Whether to install many packages at once or one by one. This can fix PyPI DNS resolution errors, but also slows down the installation
      installer-parallel: # optional, default is true
      # Arguments passed directly to the Poetry installation script. For example --force.
      installation-arguments: # optional    

    - name: Install dependencies

      run:
        Poetry install
