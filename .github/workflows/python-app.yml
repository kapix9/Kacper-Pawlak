name: Python application

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ]
    defaults:
      run:
        working-directory: ./example-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install Poetry
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"

      - name: Install Poetry
        if: matrix.os == 'windows-latest'
        run: |
          (Invoke-WebRequest -Uri https://install.python-poetry.org).Content | Invoke-Expression
          $env:PATH = "$($env:APPDATA)\Poetry\bin;$env:PATH"

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-root  
      
      - name: Task test
        run: poetry run task test

  lint:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ]
    needs: build
    defaults:
      run:
        working-directory: ./example-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install Poetry
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"

      - name: Install Poetry
        if: matrix.os == 'windows-latest'
        run: |
          (Invoke-WebRequest -Uri https://install.python-poetry.org).Content | Invoke-Expression
          $env:PATH = "$($env:APPDATA)\Poetry\bin;$env:PATH"

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Test lint
        run: poetry run task lint

  formatter:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ]
    needs: build
    defaults:
      run:
        working-directory: ./example-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install Poetry
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"

      - name: Install Poetry
        if: matrix.os == 'windows-latest'
        run: |
          (Invoke-WebRequest -Uri https://install.python-poetry.org).Content | Invoke-Expression
          $env:PATH = "$($env:APPDATA)\Poetry\bin;$env:PATH"

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Task Formatter
        run: poetry run task formatter

  security:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ]
    needs: build
    defaults:
      run:
        working-directory: ./example-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install Poetry
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"

      - name: Install Poetry
        if: matrix.os == 'windows-latest'
        run: |
          (Invoke-WebRequest -Uri https://install.python-poetry.org).Content | Invoke-Expression
          $env:PATH = "$($env:APPDATA)\Poetry\bin;$env:PATH"

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Task Security
        run: poetry run task security

  unittests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ]
    needs:
      - lint
      - formatter
      - security
    defaults:
      run:
        working-directory: ./example-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install Poetry
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"

      - name: Install Poetry
        if: matrix.os == 'windows-latest'
        run: |
          (Invoke-WebRequest -Uri https://install.python-poetry
